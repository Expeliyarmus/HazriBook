import React, { useState, useEffect } from 'react';
import { BarChart3, Download, Calendar, TrendingUp, Users, FileText, Mail } from 'lucide-react';
import { StudentsStorage, AttendanceStorage } from '../../utils/storage';
import { AttendanceRecord } from '../../types';
import { useApp } from '../../context/AppContext';

const ReportsScreen: React.FC = () => {
  const { state } = useApp();
  const [selectedPeriod, setSelectedPeriod] = useState<'today' | 'week' | 'month'>('today');
  const [selectedClass, setSelectedClass] = useState<string>('all');
  const [attendanceData, setAttendanceData] = useState<AttendanceRecord[]>([]);
  const [statistics, setStatistics] = useState({
    totalStudents: 0,
    totalPresent: 0,
    totalAbsent: 0,
    attendanceRate: 0,
    totalSessions: 0,
  });

  useEffect(() => {
    const loadReportData = () => {
      let records: AttendanceRecord[] = [];
      const today = new Date();

      // Get attendance based on period
      if (selectedPeriod === 'today') {
        records = AttendanceStorage.getByDate(today.toISOString().split('T')[0]);
      } else if (selectedPeriod === 'week') {
        // Get last 7 days
        for (let i = 0; i < 7; i++) {
          const date = new Date(today);
          date.setDate(date.getDate() - i);
          const dayRecords = AttendanceStorage.getByDate(date.toISOString().split('T')[0]);
          records = [...records, ...dayRecords];
        }
      } else {
        // Get last 30 days
        for (let i = 0; i < 30; i++) {
          const date = new Date(today);
          date.setDate(date.getDate() - i);
          const dayRecords = AttendanceStorage.getByDate(date.toISOString().split('T')[0]);
          records = [...records, ...dayRecords];
        }
      }

      // Filter by class if needed
      if (selectedClass !== 'all') {
        records = records.filter((r) => r.class === selectedClass);
      }

      setAttendanceData(records);

      // Calculate statistics
      const allStudents =
        selectedClass === 'all'
          ? StudentsStorage.getAll()
          : StudentsStorage.getByClass(selectedClass);

      const uniquePresent = new Set(records.map((r) => r.studentId)).size;
      const uniqueSessions = new Set(records.map((r) => r.photo)).size;

      setStatistics({
        totalStudents: allStudents.length,
        totalPresent: uniquePresent,
        totalAbsent: allStudents.length - uniquePresent,
        attendanceRate:
          allStudents.length > 0 ? Math.round((uniquePresent / allStudents.length) * 100) : 0,
        totalSessions: uniqueSessions,
      });
    };

    loadReportData();
  }, [selectedPeriod, selectedClass]);

  // loadReportData is defined inside useEffect to avoid dependency issues

  const handleExport = () => {
    const data = {
      period: selectedPeriod,
      class: selectedClass,
      statistics,
      records: attendanceData,
      exportedAt: new Date().toISOString(),
      school: state.school?.name,
      teacher: state.school?.teacherName
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `attendance-report-${selectedPeriod}-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleEmailShare = () => {
    const date = new Date().toISOString().split('T')[0];
    const subject = `Attendance Report - ${state.school?.name} - ${date}`;
    
    // Create email body
    const body = `
Attendance Report
================
School: ${state.school?.name}
Teacher: ${state.school?.teacherName}
Date: ${getDateRangeText()}
Class: ${selectedClass === 'all' ? 'All Classes' : selectedClass}

STATISTICS
----------
Total Students: ${statistics.totalStudents}
Present: ${statistics.totalPresent}
Absent: ${statistics.totalAbsent}
Attendance Rate: ${statistics.attendanceRate}%
Total Sessions: ${statistics.totalSessions}

DETAILED RECORDS
---------------
${attendanceData.slice(0, 10).map(r => 
  `${r.studentName} (${r.class}) - ${r.date} ${r.time}`
).join('\n')}
${attendanceData.length > 10 ? `\n... and ${attendanceData.length - 10} more records` : ''}

---
Generated by Class Photo Attendance System
`.trim();

    // Create CSV data for attachment
    const csvContent = createCSVContent();
    
    // Open email client with pre-filled data
    const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.open(mailtoLink, '_blank');
    
    // Also offer to download CSV for manual attachment
    downloadCSV(csvContent);
  };

  const createCSVContent = () => {
    let csv = 'Student Name,Class,Date,Time,Status\n';
    attendanceData.forEach(record => {
      csv += `"${record.studentName}","${record.class}","${record.date}","${record.time}","Present"\n`;
    });
    return csv;
  };

  const downloadCSV = (content: string) => {
    const blob = new Blob([content], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `attendance-${selectedPeriod}-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const getDateRangeText = () => {
    if (selectedPeriod === 'today') return new Date().toLocaleDateString();
    if (selectedPeriod === 'week') return 'Last 7 Days';
    return 'Last 30 Days';
  };

  // Group attendance by date for chart
  const attendanceByDate = attendanceData.reduce(
    (acc, record) => {
      if (!acc[record.date]) {
        acc[record.date] = new Set();
      }
      acc[record.date].add(record.studentId);
      return acc;
    },
    {} as Record<string, Set<string>>
  );

  return (
    <div className="p-4 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">Reports</h2>
          <p className="text-sm text-gray-600 mt-1">{getDateRangeText()}</p>
        </div>
        <div className="flex space-x-2">
          <button 
            onClick={handleEmailShare}
            className="btn-outline flex items-center"
            title="Share via Email"
          >
            <Mail className="w-4 h-4 mr-2" />
            Email
          </button>
          <button 
            onClick={handleExport}
            className="btn-outline flex items-center"
            title="Download JSON"
          >
            <Download className="w-4 h-4 mr-2" />
            Export
          </button>
        </div>
      </div>

      {/* Filters */}
      <div className="grid grid-cols-2 gap-3">
        <select
          value={selectedPeriod}
          onChange={(e) => setSelectedPeriod(e.target.value as any)}
          className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
        >
          <option value="today">Today</option>
          <option value="week">Last 7 Days</option>
          <option value="month">Last 30 Days</option>
        </select>

        <select
          value={selectedClass}
          onChange={(e) => setSelectedClass(e.target.value)}
          className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
        >
          <option value="all">All Classes</option>
          {state.school?.classes.map((cls) => (
            <option key={cls} value={cls}>
              {cls}
            </option>
          ))}
        </select>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-2 gap-4">
        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Students</p>
              <p className="text-2xl font-bold text-gray-900">{statistics.totalStudents}</p>
            </div>
            <Users className="w-8 h-8 text-primary-600" />
          </div>
        </div>

        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Present</p>
              <p className="text-2xl font-bold text-green-600">{statistics.totalPresent}</p>
            </div>
            <TrendingUp className="w-8 h-8 text-green-600" />
          </div>
        </div>

        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Attendance Rate</p>
              <p className="text-2xl font-bold text-blue-600">{statistics.attendanceRate}%</p>
            </div>
            <BarChart3 className="w-8 h-8 text-blue-600" />
          </div>
        </div>

        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Sessions</p>
              <p className="text-2xl font-bold text-indigo-600">{statistics.totalSessions}</p>
            </div>
            <Calendar className="w-8 h-8 text-indigo-600" />
          </div>
        </div>
      </div>

      {/* Attendance Chart */}
      <div className="card">
        <h3 className="font-semibold text-gray-900 mb-4">Attendance Trend</h3>

        {Object.keys(attendanceByDate).length === 0 ? (
          <div className="text-center py-8">
            <BarChart3 className="w-12 h-12 text-gray-400 mx-auto mb-3" />
            <p className="text-gray-500">No attendance data for selected period</p>
          </div>
        ) : (
          <div className="space-y-3">
            {Object.entries(attendanceByDate)
              .sort((a, b) => b[0].localeCompare(a[0]))
              .slice(0, 7)
              .map(([date, students]) => {
                const percentage =
                  statistics.totalStudents > 0
                    ? (students.size / statistics.totalStudents) * 100
                    : 0;

                return (
                  <div key={date} className="flex items-center space-x-3">
                    <p className="text-sm text-gray-600 w-24">
                      {new Date(date).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                      })}
                    </p>
                    <div className="flex-1 bg-gray-200 rounded-full h-6 overflow-hidden">
                      <div
                        className="bg-primary-600 h-full flex items-center justify-end pr-2"
                        style={{ width: `${percentage}%` }}
                      >
                        <span className="text-xs text-white font-medium">{students.size}</span>
                      </div>
                    </div>
                    <p className="text-sm font-medium text-gray-900 w-12 text-right">
                      {Math.round(percentage)}%
                    </p>
                  </div>
                );
              })}
          </div>
        )}
      </div>

      {/* Detailed Records */}
      <div className="card">
        <h3 className="font-semibold text-gray-900 mb-4">Recent Records</h3>

        {attendanceData.length === 0 ? (
          <p className="text-gray-500 text-sm">No records found</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-2 text-gray-600">Student</th>
                  <th className="text-left py-2 text-gray-600">Class</th>
                  <th className="text-left py-2 text-gray-600">Date</th>
                  <th className="text-left py-2 text-gray-600">Time</th>
                </tr>
              </thead>
              <tbody>
                {attendanceData.slice(0, 10).map((record) => (
                  <tr key={record.id} className="border-b border-gray-100">
                    <td className="py-2 text-gray-900">{record.studentName}</td>
                    <td className="py-2 text-gray-600">{record.class}</td>
                    <td className="py-2 text-gray-600">
                      {new Date(record.date).toLocaleDateString()}
                    </td>
                    <td className="py-2 text-gray-600">{record.time}</td>
                  </tr>
                ))}
              </tbody>
            </table>

            {attendanceData.length > 10 && (
              <p className="text-center text-sm text-gray-500 mt-3">
                Showing 10 of {attendanceData.length} records
              </p>
            )}
          </div>
        )}
      </div>

      {/* Export Options */}
      <div className="card bg-gray-50">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <FileText className="w-6 h-6 text-gray-600" />
              <div>
                <p className="font-medium text-gray-900">Share & Export</p>
                <p className="text-sm text-gray-600">Share reports via email or download</p>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-3">
            <button 
              onClick={handleEmailShare}
              className="btn-primary flex items-center justify-center"
              title="Share report via email with CSV attachment"
            >
              <Mail className="w-4 h-4 mr-2" />
              Email Report
            </button>
            <button 
              onClick={handleExport}
              className="btn-outline flex items-center justify-center"
              title="Download as JSON file"
            >
              <Download className="w-4 h-4 mr-2" />
              Download JSON
            </button>
          </div>
          
          <p className="text-xs text-gray-500 text-center">
            Email will include report summary and CSV file for Excel
          </p>
        </div>
      </div>
    </div>
  );
};

export default ReportsScreen;
